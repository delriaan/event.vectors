% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/1_event.vectors.R
\name{event.vectors}
\alias{event.vectors}
\title{Event Vectors Class}
\description{
\code{event.vectors} is an R6 class object that creates a temporally-compared space of "\emph{event vectors}", each comprised of a 'from' and 'to' temporal marker.

The time between these events is the focus of derivation: properly, the event vector is a complex number that encodes the relationship between the boundaries of the events, thus allowing one to describe this relationship in a concise manner.
}
\section{Execution Workflow}{

The initial execution order should look something like the following ...
\cr
\code{ event.vectors$new(...)$configure(...)$make.evs_universe(...) }.  The ability to execute the preceding workflow out of order exists, but it is best to adhere to the provided flow the first time around.
\cr
}

\section{Class Member "Space"}{

\code{$space} is a \code{\link[data.table]{data.table}} that is populated upon execution of \code{$make.evs_universe()}:
\describe{
\item{\code{jk}}{Values of the "join key"}
\item{"crossed" time output}{ See \code{\link{cross.time}()}}
\item{\code{fr_*}, \code{to_*}}{The temporal ranges of each \emph{from}/\emph{to}event}
\item{\code{src.pair}}{Values of the "from-to" pairings of events given by the contexts provided: FROM:TO}
\item{\code{from.coord}}{String representation of temporal boundaries expressed as concatenated integers}
\item{\code{to.coord}}{String representation of temporal boundaries expressed as concatenated integers}
}
}

\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{space}}{The object containing the derived set of data (see 'Details')}

\item{\code{q_graph}}{A 'query graph' list containing the event interactions for each level of 'jk' (see 'Details')}

\item{\code{evt_graphs}}{Event graphs for each level of 'jk' (see 'Details')
Initialize the Event Vector Class}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{config}}{This is an active binding that returns the configuration used to instantiate the class.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-event.vectors-new}{\code{event.vectors$new()}}
\item \href{#method-event.vectors-configure}{\code{event.vectors$configure()}}
\item \href{#method-event.vectors-make.evs_universe}{\code{event.vectors$make.evs_universe()}}
\item \href{#method-event.vectors-clone}{\code{event.vectors$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-event.vectors-new"></a>}}
\if{latex}{\out{\hypertarget{method-event.vectors-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{event.vectors$new(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{(not used)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-event.vectors-configure"></a>}}
\if{latex}{\out{\hypertarget{method-event.vectors-configure}{}}}
\subsection{Method \code{configure()}}{
\code{$configure()} creates references to the source data to use.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{event.vectors$configure(
  src.defs,
  contexts,
  map.fields = NULL,
  src.mix = "comb",
  exclude.mix = NULL,
  chatty = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{src.defs}}{Strings or expressions that define the data to use (must return \code{\link{data.frame}}, \code{\link{data.table}}, or list)}

\item{\code{contexts}}{An atomic vector of strings serving as labels for each data source}

\item{\code{map.fields}}{A list of column name vectors for each definition in \code{src.defs} providing data for the \emph{join key} (\code{jk}), \emph{start} (\code{time_start_idx}), and \emph{end} (\code{time_end_idx}) references. Provide names for elements in each vector to specify which data source field is mapped to each name (\code{jk}, \code{time_start_idx}, and \code{time_end_idx}).\cr Regarding \emph{join key}: choose the columns having values that are shared across two or more event sources.}

\item{\code{src.mix}}{\describe{
\item{"combination":}{ The default: generates unique pairs of sources}
\item{"reflexive":}{ Compares each source to itself}
\item{"all":}{ The union of the preceding options}
} \cr Partial matching is allowed, and generated combinations include the mirror (e.g., "A, B" will have a "B, A" combo pair generated).}

\item{\code{exclude.mix}}{A list of vectors containing each source pair context to exclude (e.g. \code{list(c("A", "C"), c("u", "k"))}). \code{\link{evs_exclude.blender}} can be invoked to create this list more quickly.  Combinations are not automatically mirrored as is the case with \code{src.mix}.}

\item{\code{chatty}}{(logical | \code{FALSE}) Verbosity flag}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-event.vectors-make.evs_universe"></a>}}
\if{latex}{\out{\hypertarget{method-event.vectors-make.evs_universe}{}}}
\subsection{Method \code{make.evs_universe()}}{
\code{make.evs_universe} supplies values to two class fields: \code{q_graph} and \code{space}, the latter being created from the former.

\emph{Additional Information}:
\itemize{
\item{Class member \code{$space} should have as many rows as the sum of all edge counts for graphs in \code{$q_graph}}
\item{The graphs in class member \code{$evt_graphs} are \code{\link[visNetwork]{visIgraph}}-ready}
\item{Parallelism is internally supported via package \code{furrr}: the user is responsible for setting the appropriate \code{\link[future]{plan}}}
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{event.vectors$make.evs_universe(
  ...,
  time.control = list(-Inf, Inf),
  graph.control = NULL,
  unit = NULL,
  furrr_opts = furrr::furrr_options(scheduling = Inf, seed = TRUE),
  graph.only = FALSE,
  chatty = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{(\code{\link[rlang]{dots_list}}) Logical expression that retain graph edges meeting the conditions}

\item{\code{time.control}}{A 2-element list containing the minimum and maximum values allowed for total temporal span between two events}

\item{\code{graph.control}}{An expression list containing \code{\link[igraph]{igraph-package}} calls to manipulate the internally-created graph in the order provided.  Use symbol \code{g} to generically denote the graph and \code{<<-} to update \code{g}.}

\item{\code{unit}}{(See \code{\link{cross.time}})}

\item{\code{furrr_opts}}{\code{\link[furrr]{furrr_options}} defaulted as \code{scheduling = Inf} and \code{seed = TRUE}: internal globals are also set and will be appended to values provided here}

\item{\code{graph.only}}{(logical | \code{FALSE}) \code{TRUE} assumes class member \code{$space} exists (possibly after external modification) and recreates member \code{$evt_graphs}}

\item{\code{chatty}}{(logical | \code{FALSE}) Verbosity flag}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly, the original object augmented with new member \code{space}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-event.vectors-clone"></a>}}
\if{latex}{\out{\hypertarget{method-event.vectors-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{event.vectors$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
