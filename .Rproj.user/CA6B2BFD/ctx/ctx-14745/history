][
, MI := table(prescr_timeout_island, tuned_timeout_island) |> mi.empirical(unit = "log2")
, by = .(join_key, src)
]
})(
prescribed_timeout_islands[(GAP > 0), .(join_key, src, rec_idx, prescr_timeout_island = ISLAND, GAP)]
, tuned_timeout_islands[(GAP > 0), .(join_key, src, rec_idx, tuned_timeout_island = ISLAND)]
);
tuned_timeout@plot |>
plotly_layout(
width = 720, margin = list(b = -10)
, paper_bgcolor = "#DDDDDD", plot_bgcolor = "#FEEEFF"
)
compare_data |>
modify_at(c("prescr_timeout_island", "tuned_timeout_island"), as.numeric) |>
plot_ly(
x = ~prescr_timeout_island
, y = ~tuned_timeout_island
, z = ~book.of.utilities::ratio(RMS_island_dev, type = "of.sum", d = 8)
, hoverinfo = "text"
, hovertext = ~glue::glue("Prescribed timeout (10): Island = {prescr_timeout_island}<br>Tuned timeout ({tuned_timeout@best_k}): Island = {tuned_timeout_island}<br>Relative proportional deviation: {book.of.utilities::ratio(RMS_island_dev, type = \"of.max\", d = 4)}")
, type = "contour"
, width = 720
, height = 640
) |>
plotly::config(mathjax = "cdn") |>
plotly::colorbar(title = "Density of <br>Island Deviation<sup>RMS</sup>") |>
plotly::hide_colorbar() |>
plotly_layout(
title = list(text = TeX("\\text{Tuned vs. Prescribed Timeout} \\\\ \\text{Relative RMS Deviation (height)}"))
, xaxis = list(title = list(text = TeX("\\text{Island: Prescribed Timeout (t = 10)}")))
, yaxis = list(title = list(text = TeX(glue::glue("\\text{{Island: Tuned Timeout (t = {tuned_timeout@best_k})}}"))))
, margin = list(t = -5, b = -5)
, paper_bgcolor = "#CCCCCC"
) |>
htmltools::tagList()
compare_data |>
modify_at(c("prescr_timeout_island", "tuned_timeout_island"), as.numeric) |>
plot_ly(
x = ~prescr_timeout_island
, y = ~tuned_timeout_island
, z = ~book.of.utilities::ratio(MI, type = "of.max", d = 4)
, hoverinfo = "text"
, hovertext = ~glue::glue("Prescribed timeout (10): Island = {prescr_timeout_island}<br>Tuned timeout ({tuned_timeout@best_k}): Island = {tuned_timeout_island}<br>Relative Mutual Information: {book.of.utilities::ratio(RMS_island_dev, type = \"of.max\", d = 4)}")
, type = "contour"
, width = 720
, height = 640
) |>
plotly::config(mathjax = "cdn") |>
plotly::colorbar(title = "Density of <br>Island Deviation<sup>RMS</sup>") |>
plotly::hide_colorbar() |>
plotly_layout(
title = list(text = TeX("\\text{Tuned vs. Prescribed Timeout} \\\\ \\text{Relative Mutual Information (height)}"))
, xaxis = list(title = list(text = TeX("\\text{Island: Prescribed Timeout (t = 10)}")))
, yaxis = list(title = list(text = TeX(glue::glue("\\text{{Island: Tuned Timeout (t = {tuned_timeout@best_k})}}"))))
, margin = list(t = -5, b = -5)
, paper_bgcolor = "#CCCCCC"
) |>
htmltools::tagList()
compare_data |>
modify_at(c("prescr_timeout_island", "tuned_timeout_island"), as.numeric) |>
plot_ly(
x = ~prescr_timeout_island
, y = ~tuned_timeout_island
, z = ~MI * book.of.utilities::ratio(prescr_timeout_island * tuned_timeout_island, type = "cumulative", a = TRUE, d = 4)
, hoverinfo = "text"
, hovertext = ~glue::glue("Prescribed timeout (10): Island = {prescr_timeout_island}<br>Tuned timeout ({tuned_timeout@best_k}): Island = {tuned_timeout_island}<br>Relative Mutual Information: {book.of.utilities::ratio(RMS_island_dev, type = \"of.max\", d = 4)}")
, type = "contour"
, width = 720
, height = 640
) |>
plotly::config(mathjax = "cdn") |>
plotly::colorbar(title = "Density of <br>Island Deviation<sup>RMS</sup>") |>
plotly::hide_colorbar() |>
plotly_layout(
title = list(text = TeX("\\text{Tuned vs. Prescribed Timeout} \\\\ \\text{Expected Mutual Information (height)}"))
, xaxis = list(title = list(text = TeX("\\text{Island: Prescribed Timeout (t = 10)}")))
, yaxis = list(title = list(text = TeX(glue::glue("\\text{{Island: Tuned Timeout (t = {tuned_timeout@best_k})}}"))))
, margin = list(t = -5, b = -5)
, paper_bgcolor = "#CCCCCC"
) |>
htmltools::tagList()
compare_data |>
modify_at(c("prescr_timeout_island", "tuned_timeout_island"), as.numeric) |>
plot_ly(
x = ~prescr_timeout_island
, y = ~tuned_timeout_island
, z = ~MI * book.of.utilities::ratio(prescr_timeout_island * tuned_timeout_island, type = "cumulative", a = TRUE, d = 4)
, hoverinfo = "text"
, hovertext = ~glue::glue("Prescribed timeout (10): Island = {prescr_timeout_island}<br>Tuned timeout ({tuned_timeout@best_k}): Island = {tuned_timeout_island}<br>Relative Mutual Information: {book.of.utilities::ratio(RMS_island_dev, type = \"of.max\", d = 4)}")
, type = "contour"
, width = 720
, height = 640
) |>
plotly::config(mathjax = "cdn") |>
plotly::colorbar(title = "Density of <br>Island Deviation<sup>RMS</sup>") |>
plotly::hide_colorbar() |>
plotly_layout(
title = list(text = TeX("\\text{Tuned vs. Prescribed Timeout} \\\\ \\text{Likelihood Mutual Information (height)}"))
, xaxis = list(title = list(text = TeX("\\text{Island: Prescribed Timeout (t = 10)}")))
, yaxis = list(title = list(text = TeX(glue::glue("\\text{{Island: Tuned Timeout (t = {tuned_timeout@best_k})}}"))))
, margin = list(t = -5, b = -5)
, paper_bgcolor = "#CCCCCC"
) |>
htmltools::tagList()
compare_data |>
modify_at(c("prescr_timeout_island", "tuned_timeout_island"), as.numeric) |>
plot_ly(
x = ~prescr_timeout_island
, y = ~tuned_timeout_island
, z = ~RMS_island_dev * book.of.utilities::ratio(prescr_timeout_island * tuned_timeout_island, type = "cumulative", a = TRUE, d = 4)
, hoverinfo = "text"
, hovertext = ~glue::glue("Prescribed timeout (10): Island = {prescr_timeout_island}<br>Tuned timeout ({tuned_timeout@best_k}): Island = {tuned_timeout_island}<br>Relative proportional deviation: {book.of.utilities::ratio(RMS_island_dev, type = \"of.max\", d = 4)}")
, type = "contour"
, width = 720
, height = 640
) |>
plotly::config(mathjax = "cdn") |>
plotly::colorbar(title = "Density of <br>Island Deviation<sup>RMS</sup>") |>
plotly::hide_colorbar() |>
plotly_layout(
title = list(text = TeX("\\text{Tuned vs. Prescribed Timeout} \\\\ \\text{Likelihood RMS Deviation (height)}"))
, xaxis = list(title = list(text = TeX("\\text{Island: Prescribed Timeout (t = 10)}")))
, yaxis = list(title = list(text = TeX(glue::glue("\\text{{Island: Tuned Timeout (t = {tuned_timeout@best_k})}}"))))
, margin = list(t = -5, b = -5)
, paper_bgcolor = "#CCCCCC"
) |>
htmltools::tagList()
compare_data |>
modify_at(c("prescr_timeout_island", "tuned_timeout_island"), as.numeric) |>
plot_ly(
x = ~prescr_timeout_island
, y = ~tuned_timeout_island
, z = ~MI * book.of.utilities::ratio(prescr_timeout_island * tuned_timeout_island, type = "cumulative", a = TRUE, d = 4)
, hoverinfo = "text"
, hovertext = ~glue::glue("Prescribed timeout (10): Island = {prescr_timeout_island}<br>Tuned timeout ({tuned_timeout@best_k}): Island = {tuned_timeout_island}<br>Likelihood Mutual Information: {MI * book.of.utilities::ratio(prescr_timeout_island * tuned_timeout_island, type = \"cumulative\", a = TRUE, d = 4)}")
, type = "contour"
, width = 720
, height = 640
) |>
plotly::config(mathjax = "cdn") |>
plotly::colorbar(title = "Density of <br>Island Deviation<sup>RMS</sup>") |>
plotly::hide_colorbar() |>
plotly_layout(
title = list(text = TeX("\\text{Tuned vs. Prescribed Timeout} \\\\ \\text{Likelihood Mutual Information (height)}"))
, xaxis = list(title = list(text = TeX("\\text{Island: Prescribed Timeout (t = 10)}")))
, yaxis = list(title = list(text = TeX(glue::glue("\\text{{Island: Tuned Timeout (t = {tuned_timeout@best_k})}}"))))
, margin = list(t = -5, b = -5)
, paper_bgcolor = "#CCCCCC"
) |>
htmltools::tagList()
tuned_timeouts <- \(i){
.tmp <- event.vectors::break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
event.vectors::signal_processor(cl_size = 8, nfolds = 5, .debug = !TRUE);
gc();
.tmp@best_k
}
tuned_timeouts <- \(){
.tmp <- event.vectors::break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
event.vectors::signal_processor(cl_size = 8, nfolds = 5, .debug = !TRUE);
gc();
.tmp@best_k
}
tuned_timeouts <- \(){
set.seed(sample(.Random.seed, 1))
.tmp <- event.vectors::break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
event.vectors::signal_processor(cl_size = 8, nfolds = 5, .debug = !TRUE);
gc();
.tmp@best_k
}
map_dbl(1:10, tuned_timeouts, .progress = TRUE)
tuned_timeouts <- \(i){
set.seed(sample(.Random.seed, 1))
.tmp <- event.vectors::break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
event.vectors::signal_processor(cl_size = 8, nfolds = 5, .debug = !TRUE);
gc();
.tmp@best_k
}
map_dbl(1:10, tuned_timeouts, .progress = TRUE)
tuned_timeouts <- \(i, seed = Sys.time()){
set.seed(seed)
.tmp <- event.vectors::break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
event.vectors::signal_processor(cl_size = 8, nfolds = 5, .debug = !TRUE);
gc();
.tmp@best_k
}
tuned_timeouts <- \(i, seed = Sys.time()){
set.seed(seed)
.tmp <- event.vectors::break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
event.vectors::signal_processor(cl_size = 8, nfolds = 5, .debug = !TRUE);
gc();
Sys.sleep(1)
.tmp@best_k
}
map_dbl(1:10, tuned_timeouts, .progress = TRUE)
tuned_timeouts <- \(i){
set.seed(i)
.tmp <- event.vectors::break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
event.vectors::signal_processor(cl_size = 4, nfolds = 5, .debug = !TRUE);
gc();
Sys.sleep(1)
.tmp@best_k
}
map_dbl(1:10, \(k) assign(glue::glue("trial_{k}"), tuned_timeouts(k), envir = .GlobalEnv), .progress = TRUE)
tuned_timeouts(Sys.time())
rm(list = ls(pattern = "^trial"))
trial <- callr::r_bg(\(x){ tuned_timeouts(x)}, args = list(x = Sys.time()))
trial$is_alive()
trial$get_result()
trial <- callr::r_bg(\(x, f){ f(x)}, args = list(x = Sys.time(), f = tuned_timeouts))
trial$is_alive()
trial$get_result()
trial <- callr::r_bg(\(f, D){ f(D = D)}, args = list(D = obs_data, f = tuned_timeouts))
trial$is_alive()
trial$get_result()
tuned_timeouts <- \(D){
.tmp <- event.vectors::break_signal(
y = D$date.start
, grp = D[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
event.vectors::signal_processor(cl_size = 4, nfolds = 5, .debug = !TRUE);
gc();
Sys.sleep(1)
.tmp@best_k
}
trial <- callr::r_bg(\(f, D){ f(D = D)}, args = list(D = obs_data, f = tuned_timeouts))
trial$is_alive()
trial$get_result()
trials <- replicate(10, callr::r_bg(\(f, D){ f(D = D)}, args = list(D = obs_data, f = tuned_timeouts)))
trials |> map_lgl(\(x) x$is_alive())
trials |> map_lgl(\(x) x$get_result())
trials |> map_dbl(\(x) x$get_result())
signal_processor <- function(object, ..., nfolds = 1, cl_size = 1, .debug = FALSE){
#' Signal Processor
#'
#' @param object A "break_signal" \code{\link{S7}} object
#' @param ... (Ignored)
#' @param nfolds Number of folds to use during data generation and scoring
#' @param cl Cluster object created from package \code{parallelly}
#'
#' @return The original "break_signal" object with prescribed slots populated from the results of processing the "signal" (see \code{\link{break_signal}})
#'
#' @export
S7::check_is_S7(object);
# :: User argument handling ====
y <- object@y;
y_grp <- object@grp;
obs_ctrl <- object@obs_ctrl |>
purrr::modify_at("min_size", \(x) magrittr::set_attr(x, "label", "Minimum grouped size to process")) |>
purrr::modify_at("max_k", \(x) magrittr::set_attr(x, "label", "Maximum break allowed: \nrequires domain knowledge as this is an emperical-analytic task"))
# :: Function definitions ====
# Information encoder
info_encoder <- function(i, info.only = FALSE, data.only = info.only){
# Encode Shannon Information
#
# \code{info_encoder} converts the \code{i} into distinct series based on monotonically occurring breaks.\cr
# The cumulative proportionality within each series is converted into Shannon information as "bits".
# @note \code{info_encoder()} requires the input to be the differences of an \emph{ordered} vector
#
# @param i (numeric) The input vector of differences
# @param info.only (logical) \code{TRUE} returns the information column only
# @param data.only (logical) \code{TRUE} returns columns \code{series} and \code{cyl} only, and \code{FALSE} returns everything
#
is_signal_break <- c(0, diff(i)) < 0;
signal_data <- data.table::data.table(
dy = i
, cyl = book.of.utilities::count.cycles(is_signal_break, reset = FALSE)
)[, series := sum(dy), by = cyl]
inform <- \(x, z){
# Use each value of `x` (differences) to condition `z` (series) when `x` is
# less than or equal to the current value `i`.  The result is converted
# into an information bit.
sapply(x, \(i){
book.of.utilities::ratio(x <= i, type = "cumulative", d = 6) |>
log(base = 2) |>
magrittr::multiply_by(-1) |>
sum(na.rm = TRUE)
})
}
if (info.only){
signal_data[, .(info = inform(dy, series)), by = cyl][, .(info)]
} else {
if (data.only){
signal_data[, !c("dy")]
} else {
signal_data[, info := inform(dy, series), by = cyl][, !c("dy")]
}
# Geometric PMF
geo_pmf <- function(x, p){
# Geometric Probability Mass Function
#
# @param x The cumulative sum of differences, representing the number of attempts before success.\cr These values imply contiguous parts of the series before a break.
# @param p The cumulative proportion of the current group's difference-proportion mapped from `response.pmf`.
#
# @return \code{p * (1 - p)^x}
assertive::assert_all_are_in_left_open_range(x = p, lower = 0, upper = 1, na_ignore = TRUE, severity = "stop")
assertive::assert_all_are_greater_than_or_equal_to(x = x, y = 0, severity = "stop")
p * (1 - p)^x;
}
# Algorithm engine definition
exec_algorithm <- function(Data, nfolds){
# Execute Algorithm
#
# @param Data The input data
# @param nfolds THe number of cross-assignment folds
#
# @return A \code{\link[data.table]{data.table}} object containing folded data generation and scoring
assertive::assert_all_are_greater_than_or_equal_to(nfolds, 1, severity = "stop");
if (nfolds == 1){ nfolds <- min(c(5, Data$grp |> data.table::uniqueN())) }
fold_map <- data.table::data.table(seq_len(nfolds), Data$grp |> unique()) |> data.table::setnames(c("fold_id", "grp"));
X <- Data[
, `:=`(c("cyl", "series", "grp.info")
# Encode information ====
, info_encoder(dy, info.only = FALSE))
, by = grp
][
# Assign CV folds gy group identifier ====
fold_map, on = "grp", fold_id := fold_id, by = .EACHI
];
# Generate and score data by fold exclusion ====
fold_map$fold_id |>
unique() |>
rlang::set_names() |>
purrr::map(\(exclude_fold_id){
X[(!fold_id %in% exclude_fold_id)][
, `:=`(
# Within-group cumulative "attempts" subsequently passed to geometric PMF calculation ====
k = cumsum(dy)
, grp.info = (\(arg){
if (any(is.infinite(arg))){
arg[is.infinite(arg)] <- max(arg[!is.infinite(arg)]);
}
arg;
})(grp.info)
)
, by = .(cyl, grp)
][
# Within-group geometric PMF and break information deviation ====
, `:=`(geo_pmf = geo_pmf(x = k, p = p)
, Idev = (info - grp.info)^2
)
, by = .(cyl, grp)
][
, .(cyl, grp, series, k, info, geo_pmf, Idev)
][
# Within-group break-cycle information deviation slope ====
, d_Idev := c(0, diff(Idev))
, by = .(cyl, grp)
][
# Within-group break-cycle information deviation curvature ====
, d2_Idev := c(0, diff(d_Idev))
, by = .(cyl, grp)
] |>
score_algorithm_output()
}) |>
# Combine data and return
data.table::rbindlist(idcol = "exclude_fold_id");
}
# Scoring function definition
score_algorithm_output <- function(algo_output){
# Score Algorithm Output
#
# @param algo_output The algorithm output created from \code{exec_algorithm}
#
algo_output[
# Filter criteria ====
(k <= obs_ctrl$max_k) &
(k > 0) &
(d_Idev >= 0) & # Increasing or constant
(d2_Idev <= 0) # Concave or local maximum
, .(
# Break score (k_score): information deviation equation/model ====
k_score = (\(g, EX){
EX[g == max(g, na.rm = TRUE)] |>
mean(na.rm = TRUE) |>
magrittr::multiply_by(.N >= obs_ctrl$min_size) |>
magrittr::add(1) |>
log(base = 2)
})(g = geo_pmf, EX = geo_pmf * Idev)
# Observations per `k` ====
, k_sz = .N
, geo_pmf.max = max(geo_pmf, na.rm = TRUE)
# PMF-weighted mean of break information deviation ====
# This derives the expected value of squared information deviation (`Idev`)
#   and is used to find the optimal `k`
, Idev_wmean = weighted.mean(Idev, geo_pmf, na.rm = TRUE)
)
, by = k
][
# Interim row filter and data subset preparation ====
(k_score > 0)
, .SD[order(k, k_score)] |> unique()
][
# Slope (d'/dk) ====
, `:=`(d_kscore = c(0, diff(k_score))/c(1, diff(k))
, d_Idev_wmean = c(0, diff(Idev_wmean))/c(1, diff(k))
)
][
# Curvature (d"/dk) ====
, `:=`(d2_kscore = c(0, diff(d_kscore))
, d2_Idev_wmean = c(0, diff(d_Idev_wmean))
)
][
# Total Score ===
# `tot_score` is the mutual relative proportionality of curvatures over `k` and `Idev_wmean`
, `:=`(tot_score = (1 - book.of.utilities::ratio(abs(d2_Idev_wmean), type = "of.max", d = 6)) *
book.of.utilities::ratio(d2_kscore, type = "of.max", d = 6))
][
, `:=`(
# "Best" and alternate break values derivation ====
best_k = k[tot_score == max(tot_score, na.rm = TRUE)] |> unique()
, alt_k = k * (book.of.utilities::ratio(tot_score, type = "cumulative", d = 6) >= 0.9) *
(tot_score != max(tot_score, na.rm = TRUE))
)
];
}
# :: Grouped differentials of the observed measurements ====
grouped_response <- split(y, f = y_grp) |>
lapply(\(i) list(dy = c(0, diff(as.numeric(i))))) %>%
.[sapply(., \(x) length(unlist(x)) >= obs_ctrl$min_size)] |>
data.table::rbindlist(idcol = "grp") |>
dplyr::filter(dy > 0)
object@k <- grouped_response$dy;
# :: Proportional response values & information encoding ====
response.pmf <- table(grouped_response$dy) %>% magrittr::divide_by(sum(., na.rm = TRUE));
response.pmf <- response.pmf[as.numeric(names(response.pmf)) |> order()] |>
data.table::as.data.table() |>
data.table::setnames(c("dy", "p")) |>
purrr::modify_at("dy", as.numeric);
spsUtil::quiet(response.pmf[, info := -log(p)]);
# Merge `response.pmf` into `grouped_response`
spsUtil::quiet(grouped_response[response.pmf, on = "dy", `:=`(p = i.p, info = i.info), by = .EACHI]);
# :: Parallelism topography (depends on user argument `cl_size`) ====
.logi_vec <- (cl_size > 1L) & (data.table::uniqueN(grouped_response$g) > 1);
if (.logi_vec){
# Global assignment to allow for manual termination
cl <- parallelly::makeClusterPSOCK(workers = cl_size, autoStop = TRUE, );
parallel::clusterSetRNGStream(cl = cl, sample(-1E5:1E5, 1));
parallel::clusterExport(
cl = cl
, varlist = c("info_encoder", "geo_pmf", "exec_algorithm", "score_algorithm_output", "nfolds", "response.pmf")
, envir = environment()
);
spsUtil::quiet({
parallel::clusterSplit(cl = cl, seq = unique(grouped_response$g)) |>
purrr::walk(\(grps){
rlang::expr(parallel::clusterEvalQ(cl = cl, expr = {
library(magrittr);
library(book.of.workflow);
library(data.table);
library(book.of.utilities);
rm(list = c("X")[exists("X")]);
grouped_response <- !!data.table::as.data.table(grouped_response[(grp %in% grps)]);
})) |> eval();
});
cat("[INFO] Created cluster `cl` in the calling environment\n");
}
# :: Derive resultant dataset ====
if (.debug){ browser(); }
.temp <- if (.logi_vec){
spsUtil::quiet({
parallel::clusterEvalQ(cl = cl, exec_algorithm(data.table::copy(grouped_response), nfolds = nfolds)) |>
purrr::compact() |>
data.table::rbindlist()
})
} else {
exec_algorithm(data.table::copy(grouped_response), nfolds = nfolds);
}
# :: Greedy selection of `best_k` ====
scored_result <- .temp[(best_k == max(na.rm = TRUE, table(best_k) |> sort(decreasing = TRUE) |> names() |> data.table::first()))];
# :: Assign scored results to S7 object, clean up, and return the object invisibly ====
object@obs_ctrl <- obs_ctrl;
object@best_k <- scored_result[1, best_k];
object@alt_k <- scored_result[(alt_k > 0), alt_k |> sort()];
object@k_sz <- scored_result$k_sz;
object@score <- scored_result$k_score;
object@data <- scored_result;
if (!rlang::is_empty(cl_size) & ("cl" %in% ls())){
parallel::stopCluster(cl);
rm(list = cl[!rlang::is_empty(find("cl"))])
}
return(invisible(object));
}
