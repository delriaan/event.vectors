})
, process = S7::new_property(class = S7::class_function, getter = function(self){
function(...){
browser();
object <- signal_processor(object = self, ...);
self@obs_ctrl <<- object@obs_ctrl;
self@best_k <<- object@best_k;
self@alt_k <<- object@alt_k;
self@k_sz <<- object@k_sz;
self@score <<- object@score;
self@data <<- object@data;
return(invisible(self));
}
})
)}
#' }
#'
#' @slot best_k,alt_k (numeric) Entropy-based optimized (and next best) break in the signal (passively set by \code{\link{signal_processor}})
#' @slot k_sz (numeric) The observation size at each \code{k} (passively set by \code{\link{signal_processor}})
#' @slot score (numeric[]) The scoring vector at each \code{k} (passively set by \code{\link{signal_processor}})
#' @slot data The generated data for which scores are generated (passively set by \code{\link{signal_processor}})
#' @slot plot A \code{\link[plotly]{plot_ly}} visualization after break optimization (passively set by \code{\link{signal_processor}})
#' @slot process A convenience method that calls \code{\link{signal_processor}} on itself
#'
#' @export
break_signal <- S7::new_class(
name = "break_signal"
, package = "event.vectors"
, properties = class_properties
)
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) #|> signal_processor(cl_size = 8, .debug = !TRUE);
tune_timeout@process(cl_size = 8, .debug = !TRUE)
View(self)
self
ls(parent.frame())
ls(parent.frame(0))
ls(parent.frame(2))
ls(parent.frame(1))
tune_timeout
str(tune_timeout)
rlang::caller_call()
rlang::caller_env()
rlang::caller_arg
rlang::caller_arg()
rlang::caller_arg(`...`)
rlang::caller_arg(self)
# S7 Properties
class_properties <- { list(
y = S7::new_union(S7::class_numeric, S7::class_factor, S7::class_integer)
, k = S7::new_property(class = S7::new_union(S7::class_numeric, S7::class_factor, S7::class_integer), default = 0)
, grp = S7::class_any
, obs_ctrl = S7::new_property(class = S7::class_list, default = list(min_size = 1L, max_k = 2L))
, best_k = S7::new_property(class = S7::class_numeric, default = numeric())
, alt_k = S7::new_property(class = S7::class_numeric, default = numeric())
, k_sz = S7::new_property(class = S7::class_numeric, default = numeric())
, score = S7::new_property(class = S7::class_numeric, default = numeric())
, data = S7::new_property(class = S7::class_any, default = NULL)
, plot = S7::new_property(class = S7::class_function, getter = function(self){
plotly::plot_ly(
data = self@data
, split = ~k
, x = ~(\(i){ i[i != 0] <- sign(i[i != 0]) * log10(abs(i[i != 0])); i })(d2_Idev_wmean)
, y = ~d2_kscore
, size = ~tot_score * (1 + (2 * (k %in% self@alt_k)) + (4 * (k == self@best_k)))
, stroke = I("#000000")
, hovertext = ~glue::glue("<b>k:</b> {k}{ifelse(k == self@best_k, '<sup> Best</sup>', ifelse(k %in% self@alt_k, '<sup> Alt</sup>', ''))}<br><b>Score:</b> {round(tot_score, 4)}")
, type = "scatter"
, mode = "markers"
, width = 720
, height = 600
) |>
plotly::config(mathjax = "cdn") |>
plotly::layout(
margin = list(t = -5, b = -5)
, title = list(text = plotly::TeX("\\text{Break Score vs. Weighted-Mean Squared Information Deviation}_{\\text{ Size }\\to \\text{Total Score}}"))
, xaxis = list(
title = list(
text = plotly::TeX("\\bar{I}^{''}_{\\text{log}_{10}}"))
, showgrid = FALSE
)
, yaxis = list(
title = list(
text = plotly::TeX("{\\Omega^k}^{''}"))
, showgrid = FALSE
)
, legend = list(title = list(text = plotly::TeX("\\enspace\\enspace{k}")))
)
})
)}
#' \item{\code{min_size}: The minimum observation size at each k to allow}
#' }
#'
#' @slot best_k,alt_k (numeric) Entropy-based optimized (and next best) break in the signal (passively set by \code{\link{signal_processor}})
#' @slot k_sz (numeric) The observation size at each \code{k} (passively set by \code{\link{signal_processor}})
#' @slot score (numeric[]) The scoring vector at each \code{k} (passively set by \code{\link{signal_processor}})
#' @slot data The generated data for which scores are generated (passively set by \code{\link{signal_processor}})
#' @slot plot A \code{\link[plotly]{plot_ly}} visualization after break optimization (passively set by \code{\link{signal_processor}})
#'
#' @export
break_signal <- S7::new_class(
name = "break_signal"
, package = "event.vectors"
, properties = class_properties
)
dir(pattern = "^[a-z]{1}[_].+R$", recursive = TRUE) |> purrr::walk(source)
# ~ Initialization ====
# library(event.vectors);
library(magrittr);
library(future);
library(stringi, include.only = "%s+%")
library(tictoc);
library(purrr)
make.test_data <- function(j = 5, n = 5, m = 5, o = 1:10, dest = globalenv(), .debug = FALSE){
#' Make Test Data for Validation
#'
#' \code{make.test_data} creates several \code{\link[data.table]{data.table}} objects to be used to validate the package functionality
#' @param j (integer | 5L) The number of unique values for 'k' to generate
#' @param n (integer | 5L) The number of sources to create (maximum of 10)
#' @param m (integer | 5L) The maximum number of columns to generate for each created object (maximum of 15): each column represents an attribute not related to time
#' @param o (integer[] | 1:10) A vector of integers sampled to create end dates from a randomly-generated start date
#' @param dest (environment) The destination environment object
#' @param .debug (logical | \code{FALSE}) When \code{TRUE}, additional debugging items are printed
#'
#' @return One to \code{n} \code{\link[data.table]{data.table}} objects prefixed as 'test_data'.
#'
j = max(c(3, abs(as.integer(j))));
n = max(c(3, abs(as.integer(n)))); ifelse(n > 10, 10, n);
m = max(c(3, abs(as.integer(m)))); ifelse(m > 15, 15, m);
o = { ifelse(rlang::has_length(o, 1L)
, yes = 1:10
, no = ifelse(any(o <= 0)
, yes = abs(o)
, no = ifelse(rlang::has_length(o, 2L)
, yes = `:`(o[1], o[2]) |> sort()
, no =  o))
)}
sequence(n) %>%
purrr::set_names(paste0("test_data.", stringi::stri_pad_left(., width = 2, pad = "0")))|>
purrr::map(~{
set.seed(sample(.Random.seed, 1));
.src = LETTERS[[.x]];
.out = purrr::map_dfr(c(1:j), ~list(join_key = rep.int(.x, sample(10:100, 1, TRUE)), src = .src)) %>% data.table::as.data.table();
.init_date = c(as.Date(sprintf(
"%s-%s-%s"
, rep.int(data.table::year(Sys.Date()), nrow(.out))
, sample(stringi::stri_pad_left(1:12, width = 2, pad = "0"), nrow(.out), TRUE)
, sample(stringi::stri_pad_left(1:28, width = 2, pad = "0"), nrow(.out), TRUE)
)));
.out[
, c("date.start", "date.end") := list(.init_date, .init_date + rpois(n = length(join_key), lambda = sample(o, length(join_key), TRUE)))
][
, paste0("X_", stringi::stri_pad_left(sample(30, m), width = 2, pad = "0")) := purrr::map(1:m, ~sample(runif(1E6), .N, TRUE))
][
runif(length(join_key)) > 0.65
] %>%
data.table::setkey(join_key, src, date.start, date.end) %>%
data.table::setcolorder(c("join_key", "date.start", "date.end", "src"))
}) %>%
list2env(envir = dest);
}
BLAH <- new.env();
set.seed(sample(100000, 1));
make.test_data(j = 50, n = 3, m = 5, o = c(5, 20), dest = BLAH, .debug = !TRUE);set.seed(sample(100000, 1));
set.seed(sample(100000, 1));
make.test_data(j = 50, n = 3, m = 5, o = c(5, 20), dest = .GlobalEnv, .debug = !TRUE);
tictoc::tic.clear(); tictoc::tic.clearlog();
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |> signal_processor(cl_size = 8, .debug = !TRUE);
# ~ Validation #3 :: continuity ----
obs_data <- data.table::rbindlist(list(test_data.01, test_data.02, test_data.03), use.names = FALSE)[, `:=`(Z_1 = sample(letters, .N, TRUE), Z_2 = sample(LETTERS[1:5], .N, TRUE))] |>
data.table::setkey(join_key, src, date.start);
# >>> PRESCRIPTED TIMEOUT
prescribed_timeout <- continuity(
data = obs_data
, map_fields = c(join_key, src)
, time_fields = c(date.start, date.end)
, boundary_name = episode
, timeout = 10
, show.all = TRUE
);
str(prescribed_timeout);
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |> signal_processor(cl_size = 8, .debug = !TRUE);
tune_timeout@best_k
tuned_timeout <- continuity(
data = obs_data
, map_fields = c("join_key", "Z_1")
, time_fields = c(date.start, date.end)
, boundary_name = episode
, timeout = tune_timeout@best_k
, show.all = TRUE
);
View(tuned_timeout);
str(tuned_timeout);
tune_timeout@plot()
tune_timeout
tune_timeout@plot
table(sample(10, 100, TRUE))
table(sample(10, 100, TRUE)) |> as.vector()
source("C:/Users/sapie/GitHub/event.vectors/pkg/R/h_signal_processor.R", echo=TRUE)
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |> signal_processor(cl_size = 8, .debug = !TRUE);
tune_timeout@best_k
tune_timeout@plot
source("C:/Users/sapie/GitHub/event.vectors/pkg/R/g_break_signal.R", echo=TRUE)
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |> signal_processor(cl_size = 8, .debug = !TRUE);
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |> signal_processor(cl_size = 8, .debug = !TRUE);
tune_timeout@best_k
tune_timeout@plot
source("C:/Users/sapie/GitHub/event.vectors/pkg/R/g_break_signal.R", echo=TRUE)
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |> signal_processor(cl_size = 8, .debug = !TRUE);
tune_timeout@best_k
tune_timeout@plot
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |> signal_processor(cl_size = 8, .debug = TRUE);
source("C:/Users/sapie/GitHub/event.vectors/pkg/R/h_signal_processor.R", echo=TRUE)
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
signal_processor(cl_size = 8, .debug = TRUE);
source("C:/Users/sapie/GitHub/event.vectors/pkg/R/h_signal_processor.R", echo=TRUE)
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
signal_processor(cl_size = 8, .debug = TRUE);
table(grouped_response$dy)
table(grouped_response$dy) |> t()
table(grouped_response$dy) |> as.data.table()
table(grouped_response$dy) |> data.table::as.data.table()
source("C:/Users/sapie/GitHub/event.vectors/pkg/R/h_signal_processor.R", echo=TRUE)
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
signal_processor(cl_size = 8, .debug = TRUE);
source("C:/Users/sapie/GitHub/event.vectors/pkg/R/h_signal_processor.R", echo=TRUE)
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
signal_processor(cl_size = 8, .debug = TRUE);
source("C:/Users/sapie/GitHub/event.vectors/pkg/R/g_break_signal.R", echo=TRUE)
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
signal_processor(cl_size = 8, .debug = !TRUE);
tune_timeout@best_k
tune_timeout@plot
source("C:/Users/sapie/GitHub/event.vectors/pkg/R/g_break_signal.R", echo=TRUE)
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
signal_processor(cl_size = 8, .debug = !TRUE);
tune_timeout@best_k
tune_timeout@plot
source("C:/Users/sapie/GitHub/event.vectors/pkg/R/g_break_signal.R", echo=TRUE)
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
signal_processor(cl_size = 8, .debug = !TRUE);
# tune_timeout@best_k
tune_timeout@plot
# tune_timeout@best_k
tune_timeout@plot |> plotly::layout(width = 1600, height = 1024)
# tune_timeout@best_k
tune_timeout@plot |> plotly::style(width = 1600, height = 1024)
# tune_timeout@best_k
tune_timeout@plot |> plotly::style(width = 1280, height = 960 )
16/9
aspect_ratio <- 16/9;l
aspect_ratio <- 16/9;
aspect_ratio <- c(16, 9);
remotes::install_github("delriaan/book.of.utilities")
remotes::install_github("delriaan/book.of.utilities", subdir = "pkg")
aspect_ratio <- c(16, 9);
remotes::install_github("delriaan/book.of.utilities", subdir = "pkg")
remotes::install_github("delriaan/book.of.utilities", subdir = "pkg", force = TRUE)
# tune_timeout@best_k
tune_timeout@plot |> plotly::style(width = 80*aspect_ratio[1], height = 80*aspect_ratio[2])
aspect_ratio <- c(16, 9) * 80
# tune_timeout@best_k
tune_timeout@plot |> plotly::style(width = aspect_ratio[1], height = aspect_ratio[2])
aspect_ratio <- c(16, 9) * 90
# tune_timeout@best_k
tune_timeout@plot |> plotly::style(width = aspect_ratio[1], height = aspect_ratio[2])
aspect_ratio <- c(16, 9) * 100
aspect_ratio
# tune_timeout@best_k
tune_timeout@plot |> plotly::style(width = aspect_ratio[1], height = aspect_ratio[2])
aspect_ratio <- c(16, 9) * 80
# tune_timeout@best_k
tune_timeout@plot |> plotly::style(width = 1280, height = 720)
warnings()
# tune_timeout@best_k
tune_timeout@plot |> plotly::layout(width = aspect_ratio[1], height = aspect_ratio[2])
source("C:/Users/sapie/GitHub/event.vectors/pkg/R/g_break_signal.R", echo=TRUE)
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
signal_processor(cl_size = 8, .debug = !TRUE);
aspect_ratio <- c(16, 9) * 80
# tune_timeout@best_k
tune_timeout@plot |> plotly::layout(width = aspect_ratio[1], height = aspect_ratio[2])
source("C:/Users/sapie/GitHub/event.vectors/pkg/R/g_break_signal.R", echo=TRUE)
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
signal_processor(cl_size = 8, .debug = !TRUE);
aspect_ratio <- c(16, 9) * 80
# tune_timeout@best_k
tune_timeout@plot |> plotly::layout(width = aspect_ratio[1], height = aspect_ratio[2])
source("C:/Users/sapie/GitHub/event.vectors/pkg/R/g_break_signal.R", echo=TRUE)
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
signal_processor(cl_size = 8, .debug = !TRUE);
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
signal_processor(cl_size = 8, .debug = !TRUE);
aspect_ratio <- c(16, 9) * 80
# tune_timeout@best_k
tune_timeout@plot |> plotly::layout(width = aspect_ratio[1], height = aspect_ratio[2])
source("C:/Users/sapie/GitHub/event.vectors/pkg/R/g_break_signal.R", echo=TRUE)
# >>> TUNED TIMEOUT
tune_timeout <- break_signal(
y = obs_data$date.start
, grp = obs_data[, paste(join_key, src, sep = ":")]
, obs_ctrl = list(min_size = 5L, max_k = 120)
) |>
signal_processor(cl_size = 8, .debug = !TRUE);
aspect_ratio <- c(16, 9) * 80
# tune_timeout@best_k
tune_timeout@plot |> plotly::layout(width = aspect_ratio[1], height = aspect_ratio[2])
tuned_timeout <- continuity(
data = obs_data
, map_fields = c("join_key", "Z_1")
, time_fields = c(date.start, date.end)
, boundary_name = episode
, timeout = tune_timeout@best_k
, show.all = TRUE
);
library(event.vectors)
# dir(pattern = "^[a-z]{1}[_].+R$", recursive = TRUE) |> purrr::walk(source)
dir()
# pkgdown::build_article("Continuity-Example", pkg = "pkg")
# pkgdown::build_article("Event-Vectors-Examples", pkg = "pkg")
# pkgdown::build_article("Event-Space-and-Graph-Reduction", pkg = "pkg")
# pkgdown::build_article("Break-Signal", pkg = "pkg")
pkgdown::build_site(pkg = "pkg", examples = FALSE, override = list(destination = "../docs"))
htmltools::tags$style(readLines(Sys.getenv("CSS")) |> paste(collapse = "\n")) |> htmltools::tagList();
htmltools::tags$script(
type = 'text/javascript'
, src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/latest.min.js?config=TeX-AMS-MML_CHTML'
) |> htmltools::tagList();
source(Sys.getenv("L2HTML"));
Sys.getenv("L2HTML")
Sys.getenv("CSS")
github_repo = Sys.getenv("USERPROFILE") |> dir(pattern = "^GitHub$", recursive = TRUE, include.dirs = TRUE, full.names = TRUE);
)
github_repo
github_repo |> dir(pattern = "css$", full.names = TRUE, recursive = TRUE)
github_repo |> dir(pattern = "markdown.css$", full.names = TRUE, recursive = TRUE)
Sys.setenv(
CSS = github_repo |>
dir(pattern = "markdown.css$", full.names = TRUE, recursive = TRUE) |>
`[`(1)
, L2HTML = github_repo |>
dir(pattern = "list2html", full.names = TRUE, recursive = TRUE) |>
`[`(1)
)
Sys.setenv(
CSS = github_repo |>
dir(pattern = "markdown.css$", full.names = TRUE, recursive = TRUE) |>
magrittr::extract(1)
, L2HTML = github_repo |>
dir(pattern = "list2html", full.names = TRUE, recursive = TRUE) |>
magrittr::extract(1)
);
pkgdown::build_site(pkg = "pkg", examples = FALSE, override = list(destination = "../docs"))
Sys.setenv(
CSS = github_repo |>
dir(pattern = "markdown.css$", full.names = TRUE, recursive = TRUE) |>
magrittr::extract(3)
, L2HTML = github_repo |>
dir(pattern = "list2html", full.names = TRUE, recursive = TRUE) |>
magrittr::extract(3)
);
pkgdown::build_article("Break-Signal", pkg = "pkg")
pkgdown::build_site(pkg = "pkg", examples = FALSE, override = list(destination = "../docs"))
# pkgdown::build_article("Continuity-Example", pkg = "pkg")
# pkgdown::build_article("Event-Vectors-Examples", pkg = "pkg")
# pkgdown::build_article("Event-Space-and-Graph-Reduction", pkg = "pkg")
# pkgdown::build_article("Break-Signal", pkg = "pkg")
pkgdown::build_site(pkg = "pkg", examples = FALSE, override = list(destination = "../docs"))
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", message = FALSE, warning=FALSE);
library(stringi, include.only = "%s+%");
library(magrittr);
library(purrr);
library(event.vectors);
source("list2html.R");
test_data.01[, join_key:src] |>
DT::datatable(
options = list(dom = "rtip")
, rownames = FALSE
, extensions = c("Responsive", "Scroller")
) |>
DT::formatStyle(
columns = c("join_key", "date.start", "date.end", "src")
, textAlign = "center"
, fontWeight = "bold"
)
DT::styleRow(default = "text-align: center;")
DT::styleRow(rows = 10, values = "text-align: center;")
unlink("pkg/vignettes/Continuity-Example_cache", recursive = TRUE)
pkgdown::build_site(pkg = "pkg", examples = FALSE, override = list(destination = "../docs"))
build_site
pkgdown::build_site(pkg = "pkg", examples = FALSE, override = list(destination = "../docs"))
# ~ pkgdown ----
# usethis::use_pkgdown()
# usethis::use_proprietary_license("Chionesu George")
github_repo = Sys.getenv("GIT_REPOS")
github_repo
dir(pattern = "markdown.css$", full.names = TRUE, recursive = TRUE) |>
magrittr::extract(3)
github_repo |>
dir(pattern = "markdown.css$", full.names = TRUE, recursive = TRUE) |>
magrittr::extract(3)
github_repo |>
dir(pattern = "list2html", full.names = TRUE, recursive = TRUE) |>
magrittr::extract(3)
github_repo |>
dir(pattern = "list2", full.names = TRUE, recursive = TRUE) |>
magrittr::extract(3)
github_repo |>
dir(pattern = "list2html", full.names = TRUE, recursive = TRUE)
Sys.setenv(
CSS = github_repo |>
dir(pattern = "markdown.css$", full.names = TRUE, recursive = TRUE) |>
magrittr::extract(3)
, L2HTML = github_repo |>
dir(pattern = "list2html", full.names = TRUE, recursive = TRUE) |>
magrittr::extract(2)
);
pkgdown::build_site(pkg = "pkg", examples = FALSE, override = list(destination = "../docs"))
