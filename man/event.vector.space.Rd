% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/1. EVSpace.R
\name{event.vector.space}
\alias{event.vector.space}
\title{Relational Temporal Vector Space}
\description{
`event.vector.space` is an R6 class object that creates a temporally-compared space of "\emph{event vectors}", each comprised of a 'from' and 'to' date.

The time between these events is the focus of derivation: properly, the event vector is a complex number that encodes the relationship between the boundaries of the events, thus allowing one to describe this relationship in a concise manner.

\cr
}
\section{Execution Workflow}{

The initial execution order should look something like the following ...
\cr
\code{ event.vector.space$new(...)$configure(...)$set.data(...)$set.q_graphs(...) \%>\% make.evs_universe(...) }.  The ability to execute the preceding workflow out of order exists, but it is best to adhere to the provided flow the first time around.
\cr
\cr
}

\section{Class Member "Space"}{

\code{$space} is a \code{\link[data.table]{data.table}} that is populated upon execution of \code{\link{make.evs_universe}()}:
   \describe{
     \item{\code{jk}}{Values of the "join key"}
     \item{"crossed" time output}{ See \code{\link{cross.time}()}}
     \item{\code{fr_*}, \code{to_*}}{The temporal ranges of each \emph{from}/\emph{to}event}
     \item{\code{src.pair}}{Values of the "from-to" pairings of events given by the contexts provided: FROM:TO}
     \item{\code{from.coord}}{String representation of temporal boundaries expressed as concatenated integers}
     \item{\code{to.coord}}{String representation of temporal boundaries expressed as concatenated integers}
   }
\cr
}

\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{space}}{The object containing the derived set of data (see 'Details')}

\item{\code{q_graph}}{A 'query graph' list containing the event interactions for each level of 'jk' (see 'Details')}

\item{\code{evt_graphs}}{Event graphs for each level of 'jk' (see 'Details')
Initialize a Vector Space}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{config}}{This is an active binding that returns the configuration used to instantiate the class.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-event.vector.space-new}{\code{event.vector.space$new()}}
\item \href{#method-event.vector.space-configure}{\code{event.vector.space$configure()}}
\item \href{#method-event.vector.space-set.data}{\code{event.vector.space$set.data()}}
\item \href{#method-event.vector.space-set.q_graphs}{\code{event.vector.space$set.q_graphs()}}
\item \href{#method-event.vector.space-clone}{\code{event.vector.space$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-event.vector.space-new"></a>}}
\if{latex}{\out{\hypertarget{method-event.vector.space-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{event.vector.space$new(config = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{config}}{(see class method \code{$configure()})}

\item{\code{...}}{(not used)}

\item{\code{events.ascending}}{When \code{TRUE}, the final output will only contain chronological events.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-event.vector.space-configure"></a>}}
\if{latex}{\out{\hypertarget{method-event.vector.space-configure}{}}}
\subsection{Method \code{configure()}}{
Configuration is achieved via the object passed to \code{config} used at initialization or this method:
\itemize{
\item If the former method is used, object must be a \code{\link{data.frame}}, \code{\link{data.table}}, \code{\link{list}}(-like) with the following columns: \code{src.names}, \code{contexts}, \code{map.fields}, and \code{row.filters}. It is important to set the configuration data.frame correctly by ensuring the elements of each row are related to the same dataset; otherwise, the wrong filter may attempted to be applied to a non-existent column.
\item If using this method, the same fields are available as arguments with the additional arguments \code{src.mix} and \code{exclude.mix} that can be used to override the default behavior of how class method \code{$evs.universe()} cross-compares sources.
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{event.vector.space$configure(
  src.names,
  contexts,
  map.fields,
  row.filters,
  src.mix = "comb",
  exclude.mix = list(c("", "")),
  update = FALSE,
  chatty = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{src.names}}{An atomic vector of strings containing the R workspace names of the source datasets given in "ENVIRONMENT$object" or "object" format}

\item{\code{contexts}}{An atomic vector of strings serving as labels for each data source}

\item{\code{map.fields}}{One of two forms are supported:
\itemize{
\item An atomic vector of delimited strings, each string indicating the columns that serve as the join-key (\code{jk}), lower boundary (\code{time_start_idx}) and upper boundary (\code{time_end_idx}) in that order
\item A list of length-three array of strings following the ordering rule stated above
}}

\item{\code{row.filters}}{One of two forms are supported:
\itemize{
\item An atomic vector of strings, each element being used to filter the corresponding dataset before processing.  Each string should contain a logical statement of predicates such as \code{\eqn{(a \le b) | ((i + 10) \ge k[1])}}
\item An expression list of similar construction
}}

\item{\code{src.mix}}{\describe{
\item{"combination":}{ The default: generates unique pairs of sources}
\item{"reflexive":}{ Compares each source to itself}
\item{"all":}{ The union of the preceding options}
} \cr Partial matching is allowed, and generated combinations include the mirror (e.g., "A, B" will have a "B, A" combo pair generated).}

\item{\code{exclude.mix}}{A list of vectors containing each source pair context to exclude (e.g. \code{list(c("A", "C"), c("u", "k"))}). \code{\link{evs_exclude.blender}} can be invoked to create this list more quickly.  Combinations are not automatically mirrored as is the case with 'src.mix'.}

\item{\code{update}}{(logical) \code{TRUE} results in appending to the existing configuration}

\item{\code{chatty}}{(logical | \code{FALSE}) Verbosity flag}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-event.vector.space-set.data"></a>}}
\if{latex}{\out{\hypertarget{method-event.vector.space-set.data}{}}}
\subsection{Method \code{set.data()}}{
\code{set.data()} adds column \code{src} to the objects referenced by the configuration argument
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{event.vector.space$set.data(chatty = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{chatty}}{(logical | \code{FALSE}) Verbosity flag}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-event.vector.space-set.q_graphs"></a>}}
\if{latex}{\out{\hypertarget{method-event.vector.space-set.q_graphs}{}}}
\subsection{Method \code{set.q_graphs()}}{
\code{set.q_graphs()} creates a list of 'query graphs' for each unique value of 'jk'.  The list is stored as class member \code{q_graph}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{event.vector.space$set.q_graphs(chatty = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{chatty}}{(logical | \code{FALSE}) Verbosity flag}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-event.vector.space-clone"></a>}}
\if{latex}{\out{\hypertarget{method-event.vector.space-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{event.vector.space$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
